package kengine.util

enum class Key(val glfw: Int, val js: String) {
    SPACE(32, "Space"),
    QUOTE(39, "Quote"),
    COMMA(44, "Comma"),
    MINUS(45, "Minus"),
    PERIOD(46, "Period"),
    SLASH(47, "Slash"),
    NUM_0(48, "Digit0"),
    NUM_1(49, "Digit1"),
    NUM_2(50, "Digit2"),
    NUM_3(51, "Digit3"),
    NUM_4(52, "Digit4"),
    NUM_5(53, "Digit5"),
    NUM_6(54, "Digit6"),
    NUM_7(55, "Digit7"),
    NUM_8(56, "Digit8"),
    NUM_9(57, "Digit9"),
    SEMICOLON(59, "Semicolon"),
    EQUAL(61, "Equal"),
    A(65, "KeyA"),
    B(66, "KeyB"),
    C(67, "KeyC"),
    D(68, "KeyD"),
    E(69, "KeyE"),
    F(70, "KeyF"),
    G(71, "KeyG"),
    H(72, "KeyH"),
    I(73, "KeyI"),
    J(74, "KeyJ"),
    K(75, "KeyK"),
    L(76, "KeyL"),
    M(77, "KeyM"),
    N(78, "KeyN"),
    O(79, "KeyO"),
    P(80, "KeyP"),
    Q(81, "KeyQ"),
    R(82, "KeyR"),
    S(83, "KeyS"),
    T(84, "KeyT"),
    U(85, "KeyU"),
    V(86, "KeyV"),
    W(87, "KeyW"),
    X(88, "KeyX"),
    Y(89, "KeyY"),
    Z(90, "KeyZ"),
    LEFT_BRACKET(91, "BracketLeft"),
    BACKSLASH(92, "Backslash"),
    RIGHT_BRACKET(93, "BracketRight"),
    BACKQUOTE(96, "Backquote"),
    ESCAPE(256, "Escape"),
    ENTER(257, "Enter"),
    TAB(258, "Tab"),
    BACKSPACE(259, "Backspace"),
    INSERT(260, "Insert"),
    DELETE(261, "Delete"),
    RIGHT(262, "ArrowRight"),
    LEFT(263, "ArrowLeft"),
    DOWN(264, "ArrowDown"),
    UP(265, "ArrowUp"),
    PAGE_UP(266, "PageUp"),
    PAGE_DOWN(267, "PageDown"),
    HOME(268, "Home"),
    END(269, "End"),
    CAPS_LOCK(280, "CapsLock"),
    SCROLL_LOCK(281, "ScrollLock"),
    NUM_LOCK(282, "NumLock"),
    PRINT_SCREEN(283, "PrintScreen"),
    PAUSE(284, "Pause"),
    F1(290, "F1"),
    F2(291, "F2"),
    F3(292, "F3"),
    F4(293, "F4"),
    F5(294, "F5"),
    F6(295, "F6"),
    F7(296, "F7"),
    F8(297, "F8"),
    F9(298, "F9"),
    F10(299, "F10"),
    F11(300, "F11"),
    F12(301, "F12"),
    F13(302, "F13"),
    F14(303, "F14"),
    F15(304, "F15"),
    F16(305, "F16"),
    F17(306, "F17"),
    F18(307, "F18"),
    F19(308, "F19"),
    F20(309, "F20"),
    F21(310, "F21"),
    F22(311, "F22"),
    F23(312, "F23"),
    F24(313, "F24"),
    F25(314, "F25"),
    KP_0(320, "Numpad0"),
    KP_1(321, "Numpad1"),
    KP_2(322, "Numpad2"),
    KP_3(323, "Numpad3"),
    KP_4(324, "Numpad4"),
    KP_5(325, "Numpad5"),
    KP_6(326, "Numpad6"),
    KP_7(327, "Numpad7"),
    KP_8(328, "Numpad8"),
    KP_9(329, "Numpad9"),
    KP_DECIMAL(330, "NumpadDecimal"),
    KP_DIVIDE(331, "NumpadDivide"),
    KP_MULTIPLY(332, "NumpadMultiply"),
    KP_SUBTRACT(333, "NumpadSubtract"),
    KP_ADD(334, "NumpadAdd"),
    KP_ENTER(335, "NumpadEnter"),
    KP_EQUAL(336, "NumpadEqual"),
    LEFT_SHIFT(340, "ShiftLeft"),
    LEFT_CONTROL(341, "ControlLeft"),
    LEFT_ALT(342, "AltLeft"),
    LEFT_SUPER(343, "MetaLeft"),
    RIGHT_SHIFT(344, "ShiftRight"),
    RIGHT_CONTROL(345, "ControlRight"),
    RIGHT_ALT(346, "AltRight"),
    RIGHT_SUPER(347, "MetaRight"),
    MENU(348, "ContextMenu");

    companion object {
        private val glfwMap = values().associateBy { it.glfw }
        private val jsMap = values().associateBy { it.js }

        operator fun get(code: Int) = glfwMap[code] ?: terminateError("Key with code $code not found")
        operator fun get(code: String) = jsMap[code] ?: terminateError("Key with code $code not found")
    }
}